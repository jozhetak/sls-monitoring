# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-tm-collect

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  timeout: 300
  environment: ${file(./serverless.env.yml)}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - SNS:Publish
      Resource: "*"

resources:
  Resources:
    CandidatesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "arn"
            AttributeType: "S"
          - AttributeName: "accountId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: AccountIdIndex
            KeySchema:
              - AttributeName: accountId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: FunctionArnIndex
            KeySchema:
              - AttributeName: arn
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

        TableName: ${self:provider.environment.FUNCTIONS_TABLE}

    InvocationsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "accountId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: AccountIdIndex
            KeySchema:
              - AttributeName: accountId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

        TableName: ${self:provider.environment.INVOCATIONS_TABLE}
    AccountsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "_id"
            AttributeType: "S"
          - AttributeName: "isActive"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: isActiveIndex
            KeySchema:
              - AttributeName: isActive
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ACCOUNTS_TABLE}
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "_id"
            AttributeType: "S"
#          - AttributeName: "firstName"
#            AttributeType: "S"
#          - AttributeName: "lastName"
#            AttributeType: "S"
          - AttributeName: "email"
            AttributeType: "S"
          - AttributeName: "password"
            AttributeType: "S"
#          - AttributeName: "createdAt"
#            AttributeType: "S"
#          - AttributeName: "updatedAt"
#            AttributeType: "S"
#          - AttributeName: "accounts"
#            AttributeType: "L"
        KeySchema:
          - AttributeName: "_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: EmailPasswordIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
              - AttributeName: password
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USERS_TABLE}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true
  exclude:
    - src/**

functions:
  schedule:
    handler: src/sls-schedule/handler.run
    package:
      include:
        - src/sls-schedule/**
  collect:
    handler: src/sls-collect/handler.run
    events:
      - sns: ${self:provider.environment.SLS_RUN_ARN}
    package:
      include:
        - src/sls-collect/**
        - src/shared/**
  test:
    handler: src/test-error/handler.run
    package:
      include:
        - src/test-error/**
  authorize:
      handler: src/api/passport/passport.handler
      package:
        include:
          - src/api/passport/**
          - src/shared/model/**
  userSignIn:
    handler: src/api/auth/auth.signIn
    package:
          include:
            - src/api/auth/**
            - src/shared/model/**
    events:
      - http:
          path: signIn
          method: post
          cors: true
  createUser: ${file(./src/api/users/serverless.yml):functions.createUser}
  listUsers: ${file(./src/api/users/serverless.yml):functions.listUsers}
  getUser: ${file(./src/api/users/serverless.yml):functions.getUser}
  updateUser: ${file(./src/api/users/serverless.yml):functions.updateUser}
  deleteUser: ${file(./src/api/users/serverless.yml):functions.deleteUser}
#    events:
#      - schedule: rate(1 minute)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
